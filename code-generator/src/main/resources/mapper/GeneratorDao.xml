<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.framework.common.code_generator.dao.GeneratorDao">

	<resultMap type="com.framework.common.code_generator.model.ModelInfo" id="baseMap">
		<result column="tableName" property="tableName"/>
		<result column="tableAlias" property="tableAlias"/>
	</resultMap>
	
	<select id="queryTables" resultType="map">
		select DISTINCT table_name tableName, table_comment tableAlias from information_schema.tables 
			where table_schema = (select database()) 
		<if test="tableName != null and tableName.trim() != ''">
			and table_name like concat('%', #{tableName}, '%') 
		</if>
		order by create_time desc
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
	<select id="queryTotal" resultType="int">
		select count(*) from information_schema.tables where table_schema = (select database())
		<if test="tableName != null and tableName.trim() != ''">
			and table_name like concat('%', #{tableName}, '%') 
		</if> 
	</select> 
	
	<select id="queryTable" resultMap="baseMap">
		select DISTINCT table_name tableName, table_comment tableAlias from information_schema.tables 
			where table_schema = (select database()) and table_name = #{tableName}
	</select> 
	
	<resultMap type="com.framework.common.code_generator.model.ColumnInfo" id="baseColumnMap">
		<result column="columnName" property="columnName"/>
		<result column="columnType" property="columnType"/>
		<result column="columnComment" property="columnComment"/>
		<result column="columnKey" property="columnKey"/>
		<result column="extra" property="extra"/>
	</resultMap>
	
	<select id="queryColumns" resultType="com.framework.common.code_generator.model.ColumnInfo" resultMap="baseColumnMap">
		select column_name columnName, data_type columnType, column_comment columnComment, column_key columnKey, extra from information_schema.columns
 			where table_name = #{tableName} and table_schema = (select database()) order by ordinal_position
	</select>
</mapper>